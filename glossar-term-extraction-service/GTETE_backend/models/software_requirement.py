# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401
from GTETE_backend.models.base_model_ import Model # noqa: E501
from GTETE_backend import util  # noqa: E501


class SoftwareRequirement(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, text: str=None):  # noqa: E501
        """SoftwareRequirement - a model defined in Swagger

        :param id: The id of this SoftwareRequirement.  # noqa: E501
        :type id: str
        :param text: The text of this SoftwareRequirement.  # noqa: E501
        :type text: str
        """
        self.swagger_types = {
            'id': str,
            'text': str
        }

        self.attribute_map = {
            'id': 'id',
            'text': 'text'
        }

        self._id = id
        self._text = text

    @classmethod
    def from_dict(cls, dikt) -> 'SoftwareRequirement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SoftwareRequirement of this SoftwareRequirement.  # noqa: E501
        :rtype: SoftwareRequirement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this SoftwareRequirement.


        :return: The id of this SoftwareRequirement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this SoftwareRequirement.


        :param id: The id of this SoftwareRequirement.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def text(self) -> str:
        """Gets the text of this SoftwareRequirement.


        :return: The text of this SoftwareRequirement.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this SoftwareRequirement.


        :param text: The text of this SoftwareRequirement.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text
